generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vehicle {
  id        String    @id @default(uuid())
  busNo     String    @unique
  capacity  Int
  driver    Driver?   @relation(fields: [driverId], references: [id])
  driverId  String?

  routes    Route[]   @relation("VehicleToRoute")
  status    String    @default("active")
  createdAt DateTime  @default(now())
}

model Driver {
  id        String    @id @default(uuid())
  name      String
  phone     String    @unique
  licenseNo String
  password  String?

  vehicle   Vehicle[]
  routes    Route[]   @relation("DriverToRoute")

  status    String    @default("active")
  createdAt DateTime  @default(now())
}

model Route {
  id            String                  @id @default(uuid())
  name          String
  startPoint    String
  endPoint      String

  driver        Driver?                 @relation("DriverToRoute", fields: [driverId], references: [id])
  driverId      String?

  vehicle       Vehicle?                @relation("VehicleToRoute", fields: [vehicleId], references: [id])
  vehicleId     String?

  stops         RouteStop[]
  students      Student[]
  feeStructures TransportFeeStructure[]
  status        String                  @default("active")
  createdAt     DateTime                @default(now())
}

model RouteStop {
  id            String                  @id @default(uuid())
  routeId       String?
  route         Route?                  @relation(fields: [routeId], references: [id])
  stopName      String
  address       String?
  stopOrder     Int
  stopTime      String
  latitude      Float?
  longitude     Float?
  feeAmount     Float?
  students      Student[]               @relation("StopStudents")
  feeStructures TransportFeeStructure[]
  status        String                  @default("active")
  createdAt     DateTime                @default(now())
}

model SchoolClass {
  id        String    @id @default(uuid())
  name      String    @unique
  students  Student[]
  createdAt DateTime  @default(now())
}

model ConcessionSetting {
  id        String    @id @default(uuid())
  name      String
  type      String    // "fixed" | "percentage"
  value     Float
  createdAt DateTime  @default(now())
  students  Student[] @relation("ConcessionToStudent")
}

model FineSetting {
  id        String    @id @default(uuid())
  amount    Float     // e.g. 50 or 10 (per day)
  duration  String    // "fixed" | "per_day"
  applyFrom Int       // e.g. 11 = fine starts after 10th
  createdAt DateTime  @default(now())
}

model Student {
  id              String                   @id @default(uuid())
  admissionNumber String?                  @unique
  name            String
  phone           String
  password        String?
  classId         String?
  class           SchoolClass?             @relation(fields: [classId], references: [id])
  routeId         String?
  route           Route?                   @relation(fields: [routeId], references: [id])
  stopId          String?
  stop            RouteStop?               @relation("StopStudents", fields: [stopId], references: [id])
  feeSlab         String
  concessionId    String?
  concession      ConcessionSetting?       @relation("ConcessionToStudent", fields: [concessionId], references: [id])
  status          String                   @default("active")
  createdAt       DateTime                 @default(now())

  addressLine     String?
  cityOrVillage   String?
  gender          String?                  // optional

  transactions    TransportTransaction[]
  optOutSlabs     StudentOptOutSlab[]      // ‚Üê new back-relation
}

model TransportFeeStructure {
  id            String                   @id @default(uuid())
  routeId       String
  stopId        String?
  slab          String
  amount        Float
  frequency     String                   // monthly, quarterly, yearly
  effectiveFrom DateTime
  effectiveTo   DateTime?
  createdAt     DateTime                 @default(now())

  route         Route                    @relation(fields: [routeId], references: [id])
  stop          RouteStop?               @relation(fields: [stopId], references: [id])
  transactions  TransportTransaction[]
  optOutSlabs   StudentOptOutSlab[]      // ‚Üê new back-relation
}

model TransportTransaction {
  id                 String                @id @default(uuid())
  slipId             Int?
  transactionId      String?
  studentId          String
  feeStructureId     String
  slab               String
  amount             Float
  dueAmount          Float
  concession         Float?
  fine               Float?
  fineConcession     Float?
  mode               String
  status             String
  paymentDate        DateTime
  createdAt          DateTime             @default(now())

  razorpayOrderId    String?              // üî• Add this
  razorpayPaymentId  String?              @unique // üî• Add this if not already there

  student            Student              @relation(fields: [studentId], references: [id])
  feeStructure       TransportFeeStructure @relation(fields: [feeStructureId], references: [id])
}


model Payment {
  id                String   @id @default(uuid())
  razorpayPaymentId String   @unique
  amount            Float
  status            String
  paidAt            DateTime
  studentId         String
}

model Admin {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
}

model TransportOrgProfile {
  id        String   @id @default(uuid())
  name      String
  address   String
  contact   String
  email     String
  website   String?
  createdAt DateTime @default(now())
}

model StudentOptOutSlab {
  id              String                   @id @default(uuid())
  studentId       String
  feeStructureId  String
  createdAt       DateTime                 @default(now())

  student         Student                  @relation(fields: [studentId], references: [id])
  feeStructure    TransportFeeStructure    @relation(fields: [feeStructureId], references: [id])

  @@unique([studentId, feeStructureId])
}
